using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
// JEZ:  Imports specific to the ContosoPizza Project
using ContosoPizza.Models;
using ContosoPizza.Services;

namespace ContosoPizza.Pages
{
    /// <summary>
    /// JEZ:  Class used to display a list of pizza
    /// 
    /// JEZ #2:  The PageModel class defined page handlers for
    /// HTTP request and data used to render the page.
    /// Common handlers at OnGet & OnPost
    /// </summary>
    public class PizzaListModel : PageModel
    {
        /// <summary>
        /// JEZ:  Reference to PizzaService that will be set when
        /// object is initialized...
        /// </summary>
        private readonly PizzaService _service;

        /// <summary>
        /// JEZ:  Define PizzaList - "default!" is a message to the compiler
        /// to not worry about null safety checks; will be intialized later...
        /// </summary>
        public IList<Pizza> PizzaList { get; set; } = default!;

        /// <summary>
        /// User input of new pizza.  Bind property used to te NewPizza
        /// to the Razor page.  NewPizza is initialized with a value of
        /// "null" by default (or "default!" in this case) and no warning 
        /// will be generated by the compiler 
        /// </summary>
        [BindProperty]
        public Pizza NewPizza { get; set; } = default!;

        /// <summary>
        /// Constructor that is injected with PizzaService
        /// object...
        /// </summary>
        /// <param name="service">PizzaService object to be injected</param>
        public PizzaListModel(PizzaService service)
        {
            _service = service;
        }

        /// <summary>
        /// Method to intialize state needed for the page.
        /// </summary>
        public void OnGet()
        {
            // Get list of pizzas
            PizzaList = _service.GetPizzas();
        }

        /// <summary>
        /// JEZ:  Handler for HTTP POST.  Adds pizza to list
        /// if valid and saves the change, otherwise, reload 
        /// the page...
        /// </summary>
        /// <returns></returns>
        public IActionResult OnPost()
        {
            // JEZ:  Check to see user input is invalid or NewPizza
            // is still null...If so, the page is rendered (reloaded?) 
            // again...
            if (!ModelState.IsValid || NewPizza == null)
            {
                return Page();
            }

            // JEZ:  Add pizza to list
            _service.AddPizza(NewPizza);

            // JEZ:  reload page and run "OnGet" method...
            return RedirectToAction("Get");
        }

        public IActionResult OnPostDelete(int id)
        {
            // JEZ:  Call service to delete pizza
            _service.DeletePizza(id);

            // JEZ:  This is a simple example, but is better to
            // make "Get" a variable of some sort?
            return RedirectToAction("Get");
        }
    }
}
